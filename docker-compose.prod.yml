version: '3.8'

services:
  # Taro Application
  taro-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    command: >
      sh -c "taro bokeh-server --port 5006 & sleep 3 && exec taro web-prod --port 5000 --workers 1"
    environment:
      - PYTHONUNBUFFERED=1
      # External database connection (RDS, managed PostgreSQL, etc.)
      - DATABASE_URL=${DATABASE_URL}
      # Or individual components:
      # - DB_HOST=${DB_HOST}
      # - DB_PORT=${DB_PORT:-5432}
      # - DB_NAME=${DB_NAME:-taro_stock}
      # - DB_USER=${DB_USER:-taro_user}
      # - DB_PASSWORD=${DB_PASSWORD}
      - EC2_HOST=${EC2_HOST:-localhost}
    networks:
      - taro-network
    labels:
      - "traefik.enable=true"
      # HTTPS router for Flask app
      - "traefik.http.routers.taro-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.taro-secure.entrypoints=websecure"
      - "traefik.http.routers.taro-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.taro-secure.service=taro"
      # HTTPS router for Bokeh server (WebSocket + static files) - HIGH PRIORITY
      - "traefik.http.routers.bokeh-secure.rule=Host(`${DOMAIN}`) && (PathPrefix(`/bkapp`) || PathPrefix(`/ws`) || PathPrefix(`/static`))"
      - "traefik.http.routers.bokeh-secure.entrypoints=websecure"
      - "traefik.http.routers.bokeh-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.bokeh-secure.service=bokeh"
      - "traefik.http.routers.bokeh-secure.priority=100"
      # HTTP router - redirect to HTTPS
      - "traefik.http.routers.taro-web.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.taro-web.entrypoints=web"
      - "traefik.http.routers.taro-web.middlewares=redirect-to-https"
      - "traefik.http.routers.taro-web.service=taro"
      # Middleware for HTTPS redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      # Services
      - "traefik.http.services.taro.loadbalancer.server.port=5000"
      - "traefik.http.services.bokeh.loadbalancer.server.port=5006"

  # Traefik Reverse Proxy (HTTPS with Let's Encrypt)
  traefik:
    image: traefik:v2.10
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Use HTTP challenge instead of TLS challenge (more reliable)
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Production Let's Encrypt - real trusted certificate
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - taro-network

volumes:
  traefik-certificates:

networks:
  taro-network:
    driver: bridge
