name: "Deploy to EC2"
description: "Uploads code to an EC2 instance and optionally runs a deploy script"
inputs:
  ec2_host:
    description: "EC2 host (DNS or IP)"
    required: true
  ec2_key:
    description: "Private SSH key"
    required: true
  remote_path:
    description: "Path on EC2 to upload the code to"
    required: true
  start_taro:
    description: "Whether to run deploy.sh on EC2 after upload"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Set up SSH key
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ec2_key }}" > ~/.ssh/public_key.pem
        chmod 400 ~/.ssh/public_key.pem
        ssh-keyscan -H ${{ inputs.ec2_host }} >> ~/.ssh/known_hosts

    - name: Remove old code in EC2
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          mkdir -p ${{ inputs.remote_path }}
          cd ${{ inputs.remote_path }}
          rm -rf Taro
        EOF

    - name: Clone code to EC2
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          cd ${{ inputs.remote_path }}
          git clone https://github.com/coffefever/Taro.git
        EOF

    - name: Install taro in EC2
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          cd ${{ inputs.remote_path }}
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment at ${{ inputs.remote_path }}/venv"
            python3 -m venv venv
          else
            echo "Virtual environment already exists at ${{ inputs.remote_path }}/venv"
          fi
          source venv/bin/activate
          cd ${{ inputs.remote_path }}/Taro
          pip install -e .
        EOF

    - name: Restart service with deploy scripts
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          cd ${{ inputs.remote_path }}
          source venv/bin/activate
          cd ${{ inputs.remote_path }}/Taro/deploy_service
          chmod +x remove_service.sh deploy_service.sh
          echo "Stopping existing service..."
          ./remove_service.sh
          echo "Deploying service..."
          ./deploy_service.sh
        EOF

    - name: Restart Docker containers
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          cd ${{ inputs.remote_path }}/Taro
          cp ~/.env .
          echo "Stopping Docker containers..."
          docker-compose -f docker-compose.prod.yml down
          echo "Building Docker containers..."
          docker-compose -f docker-compose.prod.yml build
          echo "Starting Docker containers..."
          docker-compose -f docker-compose.prod.yml up -d
        EOF

    - name: Start taro in EC2
      if: ${{ inputs.run_script == 'true' }}
      shell: bash
      run: |
        ssh -i ~/.ssh/public_key.pem ubuntu@${{ inputs.ec2_host }} << 'EOF'
          cd ~
          source venv/bin/activate
          cd ${{ inputs.remote_path }}/Taro
          taro
        EOF
